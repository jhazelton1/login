{"version":3,"sources":["Components/LoginForm.js","Components/Welcome.js","Components/LoginFail.js","Components/HomeContainer.js","App.js","serviceWorker.js","index.js"],"names":["ButtonDiv","styled","div","_templateObject","LoginForm","props","react_default","a","createElement","Form","FormGroup","FormControl","id","type","placeholder","Button","variant","onClick","username","document","getElementById","value","password","verifyLogin","handleLogin","disabled","isDisabled","P","p","Welcome_templateObject","Div","_templateObject2","Welcome","text","logout","LoginFail_templateObject","LoginFail_templateObject2","LoginFail","LoginFail_Div","LoginFail_P","loginAttempts","Wrapper","HomeContainer_templateObject","HomeContainer_templateObject2","HomeContainer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isVerified","setState","actualUsername","actualPassword","loginFailed","Components_Welcome","bind","HomeContainer_Div","Components_LoginForm","Components_LoginFail","Component","App_templateObject","App","App_Div","Components_HomeContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.24dcdebb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button, Form, FormControl, FormGroup } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ButtonDiv = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const LoginForm = props => {\r\n  function handleLogin() {\r\n    let username = document.getElementById(\"username\").value;\r\n    let password = document.getElementById(\"password\").value;\r\n    props.verifyLogin(username, password);\r\n  }\r\n\r\n  return (\r\n    <Form>\r\n      <FormGroup>\r\n        <FormControl id=\"username\" type=\"text\" placeholder=\"Username\" />\r\n        <hr />\r\n        <FormControl id=\"password\" type=\"password\" placeholder=\"Password\" />\r\n      </FormGroup>\r\n      <ButtonDiv>\r\n        <Button\r\n          variant=\"outline-primary\"\r\n          onClick={() => handleLogin()}\r\n          disabled={props.isDisabled}\r\n        >\r\n          Submit\r\n        </Button>\r\n      </ButtonDiv>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nconst P = styled.p``;\r\nconst Div = styled.div``;\r\n\r\nexport const Welcome = props => {\r\n  function handleLogout() {\r\n    props.logout();\r\n  }\r\n\r\n  return (\r\n    <Div>\r\n      <P>{props.text}</P>\r\n      <Button onClick={() => handleLogout()} variant=\"outline-danger\">\r\n        Logout\r\n      </Button>\r\n    </Div>\r\n  );\r\n};\r\n\r\nexport default Welcome;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Div = styled.div`\r\n  margin: 15px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\nconst P = styled.p`\r\n  white-space: nowrap;\r\n  margin: 0px;\r\n`;\r\n\r\nexport const LoginFail = props => {\r\n  return (\r\n    <Div>\r\n      <P>{props.text}</P>\r\n      <P>{props.loginAttempts}</P>\r\n    </Div>\r\n  );\r\n};\r\n\r\nexport default LoginFail;\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport LoginForm from \"./LoginForm\";\r\nimport Welcome from \"./Welcome\";\r\nimport LoginFail from \"./LoginFail\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst Div = styled.div`\r\n  width: 20%;\r\n  height: 50%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-width: 200px;\r\n`;\r\n\r\nclass HomeContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isVerified: false,\r\n      username: \"admin\",\r\n      password: \"password\",\r\n      isDisabled: false\r\n    };\r\n  }\r\n\r\n  logout() {\r\n    this.setState({\r\n      isVerified: false,\r\n      loginAttempts: 0\r\n    });\r\n  }\r\n\r\n  verifyLogin(username, password) {\r\n    const actualUsername = this.state.username;\r\n    const actualPassword = this.state.password;\r\n    let loginAttempts = this.state.loginAttempts ? this.state.loginAttempts : 0;\r\n\r\n    if (username === actualUsername && password === actualPassword) {\r\n      this.setState({\r\n        isVerified: true,\r\n        loginFailed: false\r\n      });\r\n    } else if (loginAttempts === 5) {\r\n      this.setState({\r\n        isDisabled: true\r\n      });\r\n    } else {\r\n      if (document.getElementById(\"username\")) {\r\n        document.getElementById(\"username\").value = \"\";\r\n        document.getElementById(\"password\").value = \"\";\r\n      }\r\n\r\n      this.setState({\r\n        loginFailed: true,\r\n        loginAttempts: (loginAttempts += 1)\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const isVerified = this.state.isVerified ? this.state.isVerified : \"\";\r\n    const loginFailed = this.state.loginFailed ? this.state.loginFailed : \"\";\r\n    const loginAttempts = this.state.loginAttempts\r\n      ? 5 - this.state.loginAttempts\r\n      : \"\";\r\n    const isDisabled = this.state.isDisabled ? this.state.isDisabled : \"\";\r\n\r\n    return isVerified ? (\r\n      <Welcome logout={this.logout.bind(this)} text=\"Hello, User!\" />\r\n    ) : (\r\n      <Wrapper>\r\n        <Div>\r\n          <LoginForm\r\n            verifyLogin={this.verifyLogin.bind(this)}\r\n            disabled={isDisabled}\r\n          />\r\n        </Div>\r\n\r\n        {loginFailed ? (\r\n          <LoginFail\r\n            text=\"Incorrect Username or Password\"\r\n            loginAttempts={\"Remaining Login Attempts: \" + loginAttempts}\r\n          />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomeContainer;\r\n","import React from 'react';\r\nimport HomeContainer from './Components/HomeContainer'\r\nimport styled from 'styled-components'\r\n\r\nconst Div = styled.div`\r\n  min-height: 100vh;\r\n  background-color: aliceblue;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nfunction App() {\r\n  return (\r\n    <Div>\r\n      <HomeContainer />\r\n    </Div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}